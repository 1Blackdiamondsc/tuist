import Foundation
import TSCBasic
import TuistCore
import XCTest

@testable import TuistGenerator
@testable import TuistSupportTesting

final class AutogeneratedProjectSchemeGraphMapperTests: TuistUnitTestCase {
    private var subject: AutogeneratedProjectSchemeGraphMapper!
    
    override func setUp() {
        super.setUp()
        subject = .init()
    }
    
    override func tearDown() {
        super.tearDown()
        subject = nil
    }
    
    func test_map() throws {
        // Given
        let targetA = Target.test(
            name: "A"
        )
        let targetATests = Target.test(
            name: "ATests",
            product: .unitTests,
            dependencies: [.target(name: "A")]
        )
        
        let projectPath = try temporaryPath()
        let project = Project.test(
            path: projectPath,
            targets: [
                targetA,
                targetATests,
            ]
        )
        
        let targetANode = TargetNode.test(
            project: project,
            target: targetA
        )
        let targetATestsNode = TargetNode.test(
            project: project,
            target: targetATests
        )
        
        let targetB = Target.test(
            name: "B"
        )
        let targetBTests = Target.test(
            name: "BTests",
            product: .unitTests,
            dependencies: [.target(name: "B")]
        )
        
        let projectBPath = try temporaryPath().appending(component: "ProjectB")
        let projectB = Project.test(
            path: projectBPath,
            targets: [
                targetB,
                targetBTests,
            ]
        )
        
        let targetBNode = TargetNode.test(
            project: projectB,
            target: targetB
        )
        let targetBTestsNode = TargetNode.test(
            project: projectB,
            target: targetBTests
        )
        
        let graph = Graph.test(
            name: "A",
            entryNodes: [targetANode],
            projects: [
                project,
            ],
            targets: [
                project.path: [
                    targetANode,
                    targetATestsNode,
                ],
                projectB.path: [
                    targetBNode,
                    targetBTestsNode,
                ]
            ]
        )
        
        // When
        let (got, sideEffects) = try subject.map(graph: graph)
        
        // Then
        XCTAssertEmpty(sideEffects)
        let schemes = got.schemes

        XCTAssertEqual(schemes.count, 1)
        let scheme = try XCTUnwrap(schemes.first)
        XCTAssertEqual(scheme.name, "A-Project")
        XCTAssertEqual(
            Set(scheme.buildAction.map(\.targets) ?? []),
            Set([
                TargetReference(
                    projectPath: projectBPath,
                    name: targetB.name
                ),
                TargetReference(
                    projectPath: projectPath,
                    name: targetA.name
                ),
            ])
        )
        XCTAssertEqual(
            Set(scheme.testAction.map(\.targets) ?? []),
            Set([
                TestableTarget(
                    target: TargetReference(
                        projectPath: projectPath,
                        name: targetATests.name
                    )
                ),
                TestableTarget(
                    target: TargetReference(
                        projectPath: projectBPath,
                        name: targetBTests.name
                    )
                ),
            ])
        )
    }
}
