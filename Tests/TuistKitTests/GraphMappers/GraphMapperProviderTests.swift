import Foundation
import TuistCache
import TuistCloud
import TuistCore
import TuistCoreTesting
import TuistGenerator
import TuistSigning
import TuistSupport
import XCTest

@testable import TuistKit
@testable import TuistSupportTesting

final class GraphMapperProviderTests: TuistUnitTestCase {
    var subject: GraphMapperProvider!

    override func setUp() {
        super.setUp()
        subject = GraphMapperProvider(cache: false)
    }

    override func tearDown() {
        subject = nil
        super.tearDown()
    }

    func test_mappers_returns_theCacheMapper_when_useCache_is_true() {
        // Given
        subject = GraphMapperProvider(cache: true)

        // when
        let got = subject.mappers(config: Config.test())

        // Then
        XCTAssertEqual(got.filter { $0 is CacheMapper }.count, 1)
    }

    func test_mappers_doesnt_return_theCacheMapper_when_useCache_is_false() {
        // Given
        subject = GraphMapperProvider(cache: false)

        // when
        let got = subject.mappers(config: Config.test())

        // Then
        XCTAssertEqual(got.filter { $0 is CacheMapper }.count, 0)
    }
    
    func test_mapper_does_not_return_autogenerated_project_scheme_mapper_when_autogenerated_schemes_are_disabled() throws {
        // Given
        subject = GraphMapperProvider(cache: false)
        
        // When
        let got = subject.mappers(
            config: Config.test(
                generationOptions: [
                    .disableAutogeneratedSchemes,
                ]
            )
        )
        
        // Then
        XCTAssertEqual(got.filter { $0 is AutogeneratedProjectSchemeGraphMapper }.count, 0)
    }
    
    func test_mapper_returns_autogenerated_project_scheme_mapper() throws {
        // Given
        subject = GraphMapperProvider(cache: false)
        
        // When
        let got = subject.mappers(config: Config.test())
        
        // Then
        XCTAssertEqual(got.filter { $0 is AutogeneratedProjectSchemeGraphMapper }.count, 1)
    }
}
