import Foundation
import TuistAutomation
import TuistCore
import TuistGenerator
import TuistSupport

/// Custom mapper provider for automation features
/// It uses default `ProjectMapperProvider` but adds its own on top
final class AutomationProjectMapperProvider: ProjectMapperProviding {
    private let projectMapperProvider: ProjectMapperProviding
    private let contentHasher: ContentHashing

    init(
        projectMapperProvider: ProjectMapperProviding = ProjectMapperProvider(),
        contentHasher: ContentHashing = ContentHasher()
    ) {
        self.projectMapperProvider = projectMapperProvider
        self.contentHasher = contentHasher
    }

    func mapper(config: Config) -> ProjectMapping {
        var mappers: [ProjectMapping] = []
        mappers.append(AutomationPathProjectMapper())
        mappers.append(projectMapperProvider.mapper(config: config))

        if config.generationOptions.contains(.disableAutogeneratedSchemes) {
            mappers.append(AutogeneratedSchemesProjectMapper(enableCodeCoverage: config.generationOptions.contains(.enableCodeCoverage)))
        }

        return SequentialProjectMapper(mappers: mappers)
    }
}
