import Foundation
import TuistAutomation
import TuistCore
import TuistGenerator
import TSCBasic

/// Custom mapper provider for automation features
/// It uses default `WorkspaceMapperProvider` but adds its own on top
final class AutomationWorkspaceMapperProvider: WorkspaceMapperProviding {
    private let temporaryDirectory: AbsolutePath
    private let workspaceMapperProvider: WorkspaceMapperProviding
    
    convenience init(
        temporaryDirectory: AbsolutePath
    ) {
        self.init(
            temporaryDirectory: temporaryDirectory,
            workspaceMapperProvider: WorkspaceMapperProvider(
                projectMapperProvider: AutomationProjectMapperProvider(
                    temporaryDirectory: temporaryDirectory
                )
            )
        )
    }

    init(
        temporaryDirectory: AbsolutePath,
        workspaceMapperProvider: WorkspaceMapperProviding
    ) {
        self.temporaryDirectory = temporaryDirectory
        self.workspaceMapperProvider = workspaceMapperProvider
    }

    func mapper(config: Config) -> WorkspaceMapping {
        var mappers: [WorkspaceMapping] = []
        mappers.append(AutomationPathWorkspaceMapper(temporaryDirectory: temporaryDirectory))
        mappers.append(workspaceMapperProvider.mapper(config: config))
        if config.generationOptions.contains(.disableAutogeneratedSchemes) {
            mappers.append(AutogeneratedProjectSchemeWorkspaceMapper())
        }

        return SequentialWorkspaceMapper(mappers: mappers)
    }
}
